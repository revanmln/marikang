!function(){"use strict";const s=1609881220172,e=`cache${s}`,t=["/client/client.30977fe2.js","/client/inject_styles.5607aec6.js","/client/index.a786be2d.js","/client/index.49efc5f4.js","/client/index.aaa7578f.js","/client/[idartikel].ec2e23dd.js","/client/index.bf3dc641.js","/client/[idtoko].ae0e6fc2.js","/client/caritukang.d994f2c1.js","/client/caritoko.993119c4.js","/client/[detailArtikel].841f8dc0.js","/client/about.715677fd.js","/client/index.70909dcc.js","/client/[slug].e938f31f.js","/client/quill.snow.66c4fbce.js","/client/quill.285099bd.js"].concat(["/service-worker-index.html","/assets/css/bootstrap.min.css","/assets/css/flex-slider.css","/assets/css/font-awesome.css","/assets/css/templatemo-softy-pinko.css","/assets/fonts/Flaticon.woff","/assets/fonts/flexslider-icon.eot","/assets/fonts/flexslider-icon.svg","/assets/fonts/flexslider-icon.ttf","/assets/fonts/flexslider-icon.woff","/assets/fonts/fontawesome-webfont.eot","/assets/fonts/fontawesome-webfont.svg","/assets/fonts/fontawesome-webfont.ttf","/assets/fonts/fontawesome-webfont.woff","/assets/fonts/fontawesome-webfont.woff2","/assets/fonts/FontAwesome.otf","/assets/fonts/slick.eot","/assets/fonts/slick.svg","/assets/fonts/slick.ttf","/assets/fonts/slick.woff","/assets/images/banner-bg.png","/assets/images/blog-item-01.png","/assets/images/blog-item-02.png","/assets/images/blog-item-03.png","/assets/images/circle-dec.png","/assets/images/featured-item-01.png","/assets/images/fun-facts-bg.png","/assets/images/left-image.png","/assets/images/logo.png","/assets/images/right-image.png","/assets/images/testimonial-icon.png","/assets/images/work-process-bg.png","/assets/images/work-process-item-01.png","/assets/js/bootstrap.min.js","/assets/js/custom.js","/assets/js/imgfix.min.js","/assets/js/jquery-2.1.0.min.js","/assets/js/jquery.counterup.min.js","/assets/js/popper.js","/assets/js/scrollreveal.min.js","/assets/js/waypoints.min.js","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),n=new Set(t);self.addEventListener("install",(s=>{s.waitUntil(caches.open(e).then((s=>s.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(s=>{s.waitUntil(caches.keys().then((async s=>{for(const t of s)t!==e&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url),a=t.protocol.startsWith("http"),o=t.hostname===self.location.hostname&&t.port!==self.location.port,i=t.host===self.location.host&&n.has(t.pathname),c="only-if-cached"===e.request.cache&&!i;!a||o||c||e.respondWith((async()=>i&&await caches.match(e.request)||async function(e){const t=await caches.open(`offline${s}`);try{const s=await fetch(e);return t.put(e,s.clone()),s}catch(s){const n=await t.match(e);if(n)return n;throw s}}(e.request))())}))}();
